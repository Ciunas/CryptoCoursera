#!/usr/bin/python3.4

import gmpy2
import binascii

gmpy2.get_context().precision = 1100
N = gmpy2.mpz('1797693134862315907729305190789024733617976978942306572734300811'
        '5773267580550562068698537944921298295958550138753716401571013985864783'
        '3778606925583497541085196591615128057575940752635007475935288710823649'
        '9499407718956170543611494748650467110151015639406805275400715845608785'
        '77663743040086340742855278549092581')
N2 = gmpy2.mpz('648455842808071669662824265346772278726343720706976263060439070'
        '3787973086180811164627140152760614175691955873218402545206554249067198'
        '9242884484183935328197298853131051173864896596258282150250499026445210'
        '0885281673303711142296421027840289307657458645233683357077834689715838'
        '646088239640236866252211790085787877')
N3 = gmpy2.mpz('720062263747350425279564435525583738338084451473999841826653057'
        '9819163556901883377904234086641876639384851752649940178970835240791356'
        '8687744115513201518827933181230909199624636189683657364311917409496134'
        '8524639707885238799396839230364676670221627018353299443241192173812729'
        '276147530748597302192751375739387929')

C = gmpy2.mpz('2209645186741038177630656113488341801741006978789283107173183914'
        '3676135600120538004282329650473509424343946219751512256465839967942889'
        '4607645420405815647489880137348641204523252293201764879166664029975091'
        '8872997169052608322206777160001932926087000957999372407745896777369781'
        '7571267229951148662959627934791540')

def part1():
    A = gmpy2.ceil(gmpy2.sqrt(N))
    x = gmpy2.mpz( gmpy2.ceil( gmpy2.sqrt(A ** 2 - N))) 
    p = gmpy2.sub(A, x)
    q = gmpy2.add(A, x)
    return  p

def part2():
    A2 = gmpy2.mpz(gmpy2.ceil(gmpy2.sqrt(N2)))
    x2 = 0
    while (A2 - x2) * (A2 + x2) != N2:
        A2 = A2 + 1
        x2 = gmpy2.mpz( gmpy2.ceil( gmpy2.sqrt(A2 ** 2 - N2)))
    p = A2 - x2
    q = A2 + x2
    if not N2 == p * q:
        return
    return p

def part3():
    A3 = gmpy2.isqrt(24 * N3) + 1
    r = gmpy2.isqrt(gmpy2.square(-A3) - 4 * 2 * (3 * N3))
    q3_1 = (A3 + r) / (2 * 2)
    q3_2 = (A3 - r) / (2 * 2)
    return min( q3_1, N3 / q3_1)

def part4():
    e = gmpy2.mpz(65537)
    a = gmpy2.isqrt(N) + 1
    x = gmpy2.isqrt(a**2 - N)
    p = a - x
    q = a + x
    fi = (p-1) * (q-1)
    d = gmpy2.invert(e, fi)
    r = gmpy2.powmod(C, d, N)
    m = gmpy2.digits(r, 16).split('00')[1]
    return bytearray.fromhex(m).decode()

print (part1())
print (part2())
print (part3())
print (part4())
